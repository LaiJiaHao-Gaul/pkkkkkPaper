// 1. 问题 2.问题的学习风格 3.用户的学习风格 


// TODO 1.页面显示学习风格 ✅
// TODO 2.用户提问后，数据库获取用户的问题 ✅
// TODO 3.把问题输入进分类器（model_Doc2Vec.h5），分类器要输出这句提问的学习风格分数 ✅
// TODO 4.能否走通调整学习分数的逻辑：{(（该句的学习风格+过去的交互的学习风格的平均值）/2)+用户的问卷学习风格/2}
// TODO 5.把最新的分数传回数据库。

// TODO 1.没有reading怎么办呢。（把visual和reading合二为一算两者平均值？那么在页面显示数据分数的时候就要做好合二为一的工作）
// TODO 2.数据库里在UserInteractions表里有储存过去交互的学习风格平均值的设置，但没有储存最新的学习风格值的地方，如果觉得有必要，可添加。
// TODO 3.调整学习分数的逻辑在 / learning_chatbot / src / backend/app.js里



// 1.	实时分析用户输入：
// •	在用户每次交互中，分析用户的语言使用，尤其是关注那些可以指示感知方式（视觉、听觉、动觉）的关键词和短语。
// •	例如，如果用户经常使用“看起来”、“图像”等词汇，可以适当增加其视觉维度的权重。
// 2.	调整用户画像维度权重：
// •	根据用户的输入动态调整其画像维度的权重。可以设置一个简单的加权机制，如每次使用视觉词汇时，视觉维度权重增加0.1，而减少听觉和动觉维度的权重。
// •	可以设定一个权重更新的阈值，确保不会因为少量数据就大幅度调整用户画像。
// 3.	应用机器学习算法：
// •	可以使用机器学习算法来更精确地调整维度权重。例如，采用逻辑回归或支持向量机（SVM）分类器，根据用户的输入来预测用户更偏好的信息处理方式，并据此调整权重。
// 4.	反馈循环：
// •	在用户交互后，可以简单询问用户对回复的满意度，或者设计更精细的反馈机制来收集用户对回复质量的感受。
// •	使用这些反馈来进一步调整和优化用户画像的权重。
// 5.	个性化回复策略：
// •	根据当前的用户画像动态选择回复策略。例如，对于视觉偏好用户，可以多使用图片、图表等视觉元素；对于听觉偏好用户，可以采用语音回复或强调语调和声音的描述。


//用户历史占70% 平滑窗口占30%。
// 建立 调整 反馈
// 限制问卷只能填一次
// 前端展示用户画像变化



// 反馈时的用户画像变化，反馈时的问题画像变化。
// 用户画像变化前端展示